{
  "title": "Laravel & PHP Guidelines for AI Code Assistants",
  "sections": [
    {
      "heading": "Core Laravel Principle",
      "text": "Follow Laravel conventions first. If Laravel has a documented way to do something, use it. Only deviate when there is a clear justification."
    },
    {
      "heading": "PHP Standards",
      "bullets": [
        "Follow PSR-1, PSR-2, and PSR-12.",
        "Use camelCase for non-public-facing strings.",
        "Use short nullable notation: `?string` not `string|null`.",
        "Always specify `void` return types when methods return nothing."
      ]
    },
    {
      "heading": "Class Structure",
      "bullets": [
        "Use typed properties, not docblocks.",
        "Use constructor property promotion when all properties can be promoted.",
        "Use one trait per line."
      ]
    },
    {
      "heading": "Type Declarations & Docblocks",
      "bullets": [
        "Use typed properties over docblocks.",
        "Specify return types including `void`.",
        "Use short nullable syntax: `?Type` not `Type|null`.",
        "Document iterables with generics using `@return Collection<int, User>` style."
      ],
      "examples": [
        "/** @return Collection<int, User> */",
        "public function getUsers(): Collection"
      ]
    },
    {
      "heading": "Docblock Rules",
      "bullets": [
        "Don't use docblocks for fully type-hinted methods unless a description is needed.",
        "Always import classnames in docblocks — never use fully qualified names.",
        "Use one-line docblocks when possible: `/** @var string */`.",
        "Most common type should be listed first in multi-type docblocks.",
        "If one parameter needs a docblock, add docblocks for all parameters.",
        "For iterables, always specify key and value types.",
        "Use array shape notation for fixed keys, with each key on its own line."
      ]
    },
    {
      "heading": "Control Flow",
      "bullets": [
        "Handle error conditions first, success case last (happy path last).",
        "Avoid `else` statements — use early returns.",
        "Prefer multiple simple `if` statements over compound conditions.",
        "Always use curly braces, even for single statements.",
        "Each ternary part on its own line unless very short."
      ]
    },
    {
      "heading": "Laravel Conventions",
      "subsections": [
        {
          "heading": "Routes",
          "bullets": [
            "URLs: kebab-case (`/open-source`).",
            "Route names: camelCase (`->name('openSource')`).",
            "Parameters: camelCase (`{userId}`).",
            "Use tuple notation: `[Controller::class, 'method']`."
          ]
        },
        {
          "heading": "Controllers",
          "bullets": [
            "Use plural resource names (`PostsController`).",
            "Stick to CRUD methods: index, create, store, show, edit, update, destroy.",
            "Extract new controllers for non-CRUD actions."
          ]
        },
        {
          "heading": "Configuration",
          "bullets": [
            "Files: kebab-case (`pdf-generator.php`).",
            "Keys: snake_case (`chrome_path`).",
            "Add service configs to `config/services.php`, don’t create new files.",
            "Use `config()` helper, avoid `env()` outside config files."
          ]
        },
        {
          "heading": "Artisan Commands",
          "bullets": [
            "Names: kebab-case (`delete-old-records`).",
            "Always provide feedback (`$this->comment('All ok!')`).",
            "Show progress for loops and summary at end.",
            "Log output before processing items for easier debugging."
          ]
        }
      ]
    },
    {
      "heading": "Strings & Formatting",
      "bullets": [
        "Prefer string interpolation over concatenation."
      ]
    },
    {
      "heading": "Enums",
      "bullets": [
        "Use PascalCase for enum values."
      ]
    },
    {
      "heading": "Comments",
      "bullets": [
        "Avoid comments — write expressive code instead.",
        "Use proper formatting for necessary comments.",
        "Refactor comments into descriptive function names."
      ]
    },
    {
      "heading": "Whitespace",
      "bullets": [
        "Add blank lines between logical statements for readability.",
        "Avoid extra empty lines between `{}` brackets.",
        "Keep sequences of equivalent single-line operations grouped.",
        "Let code breathe — avoid cramped formatting."
      ]
    },
    {
      "heading": "Validation",
      "bullets": [
        "Use array notation for multiple rules for readability.",
        "Custom validation rules use snake_case."
      ]
    },
    {
      "heading": "Blade Templates",
      "bullets": [
        "Indent with 4 spaces.",
        "No spaces after control structures."
      ]
    },
    {
      "heading": "Authorization",
      "bullets": [
        "Policies use camelCase: `Gate::define('editPost', ...)`.",
        "Use CRUD verbs, but `view` instead of `show`."
      ]
    },
    {
      "heading": "Translations",
      "bullets": [
        "Use the `__()` function over `@lang`."
      ]
    },
    {
      "heading": "API Routing",
      "bullets": [
        "Use plural resource names: `/errors`.",
        "Use kebab-case: `/error-occurrences`.",
        "Avoid deep nesting for clarity and simplicity."
      ]
    },
    {
      "heading": "Testing",
      "bullets": [
        "Keep test classes in the same file when possible.",
        "Use descriptive test method names.",
        "Follow the Arrange-Act-Assert pattern."
      ]
    },
    {
      "heading": "Quick Reference",
      "subsections": [
        {
          "heading": "Naming Conventions",
          "bullets": [
            "Classes: PascalCase (`UserController`, `OrderStatus`).",
            "Methods/Variables: camelCase (`getUserName`, `$firstName`).",
            "Routes: kebab-case (`/open-source`, `/user-profile`).",
            "Config files: kebab-case (`pdf-generator.php`).",
            "Config keys: snake_case (`chrome_path`).",
            "Artisan commands: kebab-case (`delete-old-records`)."
          ]
        },
        {
          "heading": "File Structure",
          "bullets": [
            "Controllers: plural resource name + `Controller` (`PostsController`).",
            "Views: camelCase (`openSource.blade.php`).",
            "Jobs: action-based (`CreateUser`, `SendEmailNotification`).",
            "Events: tense-based (`UserRegistering`, `UserRegistered`).",
            "Listeners: action + `Listener` suffix (`SendInvitationMailListener`).",
            "Commands: action + `Command` suffix (`PublishScheduledPostsCommand`).",
            "Mailables: purpose + `Mail` suffix (`AccountActivatedMail`).",
            "Resources/Transformers: plural + `Resource`/`Transformer`.",
            "Enums: descriptive name, no prefix (`OrderStatus`, `BookingType`)."
          ]
        }
      ]
    },
    {
      "heading": "Migrations",
      "bullets": [
        "Only implement `up()` methods; leave out `down()` unless rollback is required."
      ]
    },
    {
      "heading": "Code Quality Reminders",
      "bullets": [
        "Use typed properties over docblocks.",
        "Prefer early returns over nested if/else.",
        "Use constructor property promotion when all properties can be promoted.",
        "Avoid `else` statements when possible.",
        "Use string interpolation over concatenation.",
        "Always use curly braces for control structures."
      ]
    },
    {
      "heading": "Attribution",
      "text": "These guidelines are made by the AI team at CEGO"
    }
  ]
}
